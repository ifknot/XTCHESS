#ifndef XT_CONSTANTS_H
#define XT_CONSTANTS_H

#include "xt_types.h"

// NB These represent pseudo-legal moves as if no other pieces were on the board.
const xt_bitboard_t king_attacks[64] = {
    0x0000000000000302, // A1 (0)
    0x0000000000000705, // B1 (1)
    0x0000000000000E0A, // C1 (2)
    0x0000000000001C14, // D1 (3)
    0x0000000000003828, // E1 (4)
    0x0000000000007050, // F1 (5)
    0x000000000000E0A0, // G1 (6)
    0x000000000000C040, // H1 (7)
    0x0000000000030203, // A2 (8)
    0x0000000000070507, // B2 (9)
    0x00000000000E0A0E, // C2 (10)
    0x00000000001C141C, // D2 (11)
    0x0000000000382838, // E2 (12)
    0x0000000000705070, // F2 (13)
    0x0000000000E0A0E0, // G2 (14)
    0x0000000000C040C0, // H2 (15)
    0x0000000003020300, // A3 (16)
    0x0000000007050700, // B3 (17)
    0x000000000E0A0E00, // C3 (18)
    0x000000001C141C00, // D3 (19)
    0x0000000038283800, // E3 (20)
    0x0000000070507000, // F3 (21)
    0x00000000E0A0E000, // G3 (22)
    0x00000000C040C000, // H3 (23)
    0x0000000302030000, // A4 (24)
    0x0000000705070000, // B4 (25)
    0x0000000E0A0E0000, // C4 (26)
    0x0000001C141C0000, // D4 (27)
    0x0000003828380000, // E4 (28)
    0x0000007050700000, // F4 (29)
    0x000000E0A0E00000, // G4 (30)
    0x000000C040C00000, // H4 (31)
    0x0000030203000000, // A5 (32)
    0x0000070507000000, // B5 (33)
    0x00000E0A0E000000, // C5 (34)
    0x00001C141C000000, // D5 (35)
    0x0000382838000000, // E5 (36)
    0x0000705070000000, // F5 (37)
    0x0000E0A0E0000000, // G5 (38)
    0x0000C040C0000000, // H5 (39)
    0x0003020300000000, // A6 (40)
    0x0007050700000000, // B6 (41)
    0x000E0A0E00000000, // C6 (42)
    0x001C141C00000000, // D6 (43)
    0x0038283800000000, // E6 (44)
    0x0070507000000000, // F6 (45)
    0x00E0A0E000000000, // G6 (46)
    0x00C040C000000000, // H6 (47)
    0x0302030000000000, // A7 (48)
    0x0705070000000000, // B7 (49)
    0x0E0A0E0000000000, // C7 (50)
    0x1C141C0000000000, // D7 (51)
    0x3828380000000000, // E7 (52)
    0x7050700000000000, // F7 (53)
    0xE0A0E00000000000, // G7 (54)
    0xC040C00000000000, // H7 (55)
    0x0203000000000000, // A8 (56)
    0x0507000000000000, // B8 (57)
    0x0A0E000000000000, // C8 (58)
    0x141C000000000000, // D8 (59)
    0x2838000000000000, // E8 (60)
    0x5070000000000000, // F8 (61)
    0xA0E0000000000000, // G8 (62)
    0x40C0000000000000  // H8 (63)
};

const uint64_t knight_attacks[64] = {
    0x0000000000020400, // A1 (0)
    0x0000000000050800, // B1 (1)
    0x00000000000A1100, // C1 (2)
    0x0000000000142200, // D1 (3)
    0x0000000000284400, // E1 (4)
    0x0000000000508800, // F1 (5)
    0x0000000000A01000, // G1 (6)
    0x0000000000402000, // H1 (7)
    0x0000000002040004, // A2 (8)
    0x0000000005080008, // B2 (9)
    0x000000000A110011, // C2 (10)
    0x0000000014220022, // D2 (11)
    0x0000000028440044, // E2 (12)
    0x0000000050880088, // F2 (13)
    0x00000000A0100010, // G2 (14)
    0x0000000040200020, // H2 (15)
    0x0000000204000402, // A3 (16)
    0x0000000508000805, // B3 (17)
    0x0000000A1100110A, // C3 (18)
    0x0000001422002214, // D3 (19)
    0x0000002844004428, // E3 (20)
    0x0000005088008850, // F3 (21)
    0x000000A0100010A0, // G3 (22)
    0x0000004020002040, // H3 (23)
    0x0000020400040200, // A4 (24)
    0x0000050800080500, // B4 (25)
    0x00000A1100110A00, // C4 (26)
    0x0000142200221400, // D4 (27)
    0x0000284400442800, // E4 (28)
    0x0000508800885000, // F4 (29)
    0x0000A0100010A000, // G4 (30)
    0x0000402000204000, // H4 (31)
    0x0002040004020000, // A5 (32)
    0x0005080008050000, // B5 (33)
    0x000A1100110A0000, // C5 (34)
    0x0014220022140000, // D5 (35)
    0x0028440044280000, // E5 (36)
    0x0050880088500000, // F5 (37)
    0x00A0100010A00000, // G5 (38)
    0x0040200020400000, // H5 (39)
    0x0204000402000000, // A6 (40)
    0x0508000805000000, // B6 (41)
    0x0A1100110A000000, // C6 (42)
    0x1422002214000000, // D6 (43)
    0x2844004428000000, // E6 (44)
    0x5088008850000000, // F6 (45)
    0xA0100010A0000000, // G6 (46)
    0x4020002040000000, // H6 (47)
    0x0400040200000000, // A7 (48)
    0x0800080500000000, // B7 (49)
    0x1100110A00000000, // C7 (50)
    0x2200221400000000, // D7 (51)
    0x4400442800000000, // E7 (52)
    0x8800885000000000, // F7 (53)
    0x100010A000000000, // G7 (54)
    0x2000204000000000, // H7 (55)
    0x0004020000000000, // A8 (56)
    0x0008050000000000, // B8 (57)
    0x00110A0000000000, // C8 (58)
    0x0022140000000000, // D8 (59)
    0x0044280000000000, // E8 (60)
    0x0088500000000000, // F8 (61)
    0x0010A00000000000, // G8 (62)
    0x0020400000000000  // H8 (63)
};

const uint64_t bishop_attacks[64] = {
    0x8040201008040200, // A1 (0)
    0x0080402010080500, // B1 (1)
    0x0000804020110A00, // C1 (2)
    0x0000008041221400, // D1 (3)
    0x0000000182442800, // E1 (4)
    0x0000010204885000, // F1 (5)
    0x000102040810A000, // G1 (6)
    0x0102040810204000, // H1 (7)
    0x4020100804020002, // A2 (8)
    0x8040201008050005, // B2 (9)
    0x00804020110A000A, // C2 (10)
    0x0000804122140014, // D2 (11)
    0x0000018244280028, // E2 (12)
    0x0001020488500050, // F2 (13)
    0x0102040810A000A0, // G2 (14)
    0x0204081020400040, // H2 (15)
    0x2010080402000204, // A3 (16)
    0x4020100805000508, // B3 (17)
    0x804020110A000A11, // C3 (18)
    0x0080412214001422, // D3 (19)
    0x0001824428002844, // E3 (20)
    0x0102048850005088, // F3 (21)
    0x02040810A000A010, // G3 (22)
    0x0408102040004020, // H3 (23)
    0x1008040200020408, // A4 (24)
    0x2010080500050810, // B4 (25)
    0x4020110A000A1120, // C4 (26)
    0x8041221400142241, // D4 (27)
    0x0182442800284482, // E4 (28)
    0x0204885000508804, // F4 (29)
    0x040810A000A01008, // G4 (30)
    0x0810204000402010, // H4 (31)
    0x0804020002040810, // A5 (32)
    0x1008050005081020, // B5 (33)
    0x20110A000A112040, // C5 (34)
    0x4122140014224180, // D5 (35)
    0x8244280028448201, // E5 (36)
    0x0488500050880402, // F5 (37)
    0x0810A000A0100804, // G5 (38)
    0x1020400040201008, // H5 (39)
    0x0402000204081020, // A6 (40)
    0x0805000508102040, // B6 (41)
    0x110A000A11204080, // C6 (42)
    0x2214001422418000, // D6 (43)
    0x4428002844820100, // E6 (44)
    0x8850005088040201, // F6 (45)
    0x10A000A010080402, // G6 (46)
    0x2040004020100804, // H6 (47)
    0x0200020408102040, // A7 (48)
    0x0500050810204080, // B7 (49)
    0x0A000A1120408000, // C7 (50)
    0x1400142241800000, // D7 (51)
    0x2800284482010000, // E7 (52)
    0x5000508804020100, // F7 (53)
    0xA000A01008040201, // G7 (54)
    0x4000402010080402, // H7 (55)
    0x0002040810204080, // A8 (56)
    0x0005081020408000, // B8 (57)
    0x000A112040800000, // C8 (58)
    0x0014224180000000, // D8 (59)
    0x0028448201000000, // E8 (60)
    0x0050880402010000, // F8 (61)
    0x00A0100804020100, // G8 (62)
    0x0040201008040201  // H8 (63)
};

const uint64_t rook_attacks[64] = {
    0x01010101010101FE, // A1 (0)
    0x02020202020202FD, // B1 (1)
    0x04040404040404FB, // C1 (2)
    0x08080808080808F7, // D1 (3)
    0x10101010101010EF, // E1 (4)
    0x20202020202020DF, // F1 (5)
    0x40404040404040BF, // G1 (6)
    0x808080808080807F, // H1 (7)
    0x010101010101FE01, // A2 (8)
    0x020202020202FD02, // B2 (9)
    0x040404040404FB04, // C2 (10)
    0x080808080808F708, // D2 (11)
    0x101010101010EF10, // E2 (12)
    0x202020202020DF20, // F2 (13)
    0x404040404040BF40, // G2 (14)
    0x8080808080807F80, // H2 (15)
    0x0101010101FE0101, // A3 (16)
    0x0202020202FD0202, // B3 (17)
    0x0404040404FB0404, // C3 (18)
    0x0808080808F70808, // D3 (19)
    0x1010101010EF1010, // E3 (20)
    0x2020202020DF2020, // F3 (21)
    0x4040404040BF4040, // G3 (22)
    0x80808080807F8080, // H3 (23)
    0x01010101FE010101, // A4 (24)
    0x02020202FD020202, // B4 (25)
    0x04040404FB040404, // C4 (26)
    0x08080808F7080808, // D4 (27)
    0x10101010EF101010, // E4 (28)
    0x20202020DF202020, // F4 (29)
    0x40404040BF404040, // G4 (30)
    0x808080807F808080, // H4 (31)
    0x010101FE01010101, // A5 (32)
    0x020202FD02020202, // B5 (33)
    0x040404FB04040404, // C5 (34)
    0x080808F708080808, // D5 (35)
    0x101010EF10101010, // E5 (36)
    0x202020DF20202020, // F5 (37)
    0x404040BF40404040, // G5 (38)
    0x8080807F80808080, // H5 (39)
    0x0101FE0101010101, // A6 (40)
    0x0202FD0202020202, // B6 (41)
    0x0404FB0404040404, // C6 (42)
    0x0808F70808080808, // D6 (43)
    0x1010EF1010101010, // E6 (44)
    0x2020DF2020202020, // F6 (45)
    0x4040BF4040404040, // G6 (46)
    0x80807F8080808080, // H6 (47)
    0x01FE010101010101, // A7 (48)
    0x02FD020202020202, // B7 (49)
    0x04FB040404040404, // C7 (50)
    0x08F7080808080808, // D7 (51)
    0x10EF101010101010, // E7 (52)
    0x20DF202020202020, // F7 (53)
    0x40BF404040404040, // G7 (54)
    0x807F808080808080, // H7 (55)
    0xFE01010101010101, // A8 (56)
    0xFD02020202020202, // B8 (57)
    0xFB04040404040404, // C8 (58)
    0xF708080808080808, // D8 (59)
    0xEF10101010101010, // E8 (60)
    0xDF20202020202020, // F8 (61)
    0xBF40404040404040, // G8 (62)
    0x7F80808080808080  // H8 (63)
};

const uint64_t queen_attacks[64] = {
    0x81412111090503FE, // A1 (0)
    0x02824222120A07FD, // B1 (1)
    0x0404844424150BFB, // C1 (2)
    0x08080888492A17F7, // D1 (3)
    0x1010101192542FEF, // E1 (4)
    0x2020212224A85FDF, // F1 (5)
    0x404142444850BFBF, // G1 (6)
    0x8182848890A07F7F, // H1 (7)
    0x412111090503FE03, // A2 (8)
    0x824222120A07FD07, // B2 (9)
    0x04844424150BFB0F, // C2 (10)
    0x080888492A17F71F, // D2 (11)
    0x10101192542FEF3F, // E2 (12)
    0x20212224A85FDF7F, // F2 (13)
    0x4142444850BFBFFF, // G2 (14)
    0x82848890A07F7FFF, // H2 (15)
    0x2111090503FE0305, // A3 (16)
    0x4222120A07FD070A, // B3 (17)
    0x844424150BFB0F15, // C3 (18)
    0x0888492A17F71F2A, // D3 (19)
    0x101192542FEF3F54, // E3 (20)
    0x212224A85FDF7FA8, // F3 (21)
    0x42444850BFBFFF50, // G3 (22)
    0x848890A07F7FFFA0, // H3 (23)
    0x11090503FE030509, // A4 (24)
    0x22120A07FD070A12, // B4 (25)
    0x4424150BFB0F1524, // C4 (26)
    0x88492A17F71F2A49, // D4 (27)
    0x1192542FEF3F5492, // E4 (28)
    0x2224A85FDF7FA824, // F4 (29)
    0x444850BFBFFF5048, // G4 (30)
    0x8890A07F7FFFA090, // H4 (31)
    0x090503FE03050911, // A5 (32)
    0x120A07FD070A1222, // B5 (33)
    0x24150BFB0F152444, // C5 (34)
    0x492A17F71F2A4988, // D5 (35)
    0x92542FEF3F549211, // E5 (36)
    0x24A85FDF7FA82422, // F5 (37)
    0x4850BFBFFF504844, // G5 (38)
    0x90A07F7FFFA09088, // H5 (39)
    0x0503FE0305091121, // A6 (40)
    0x0A07FD070A122242, // B6 (41)
    0x150BFB0F15244484, // C6 (42)
    0x2A17F71F2A498808, // D6 (43)
    0x542FEF3F54921110, // E6 (44)
    0xA85FDF7FA8242221, // F6 (45)
    0x50BFBFFF50484442, // G6 (46)
    0xA07F7FFFA0908884, // H6 (47)
    0x03FE030509112141, // A7 (48)
    0x07FD070A12224282, // B7 (49)
    0x0BFB0F1524448404, // C7 (50)
    0x17F71F2A49880808, // D7 (51)
    0x2FEF3F5492111010, // E7 (52)
    0x5FDF7FA824222120, // F7 (53)
    0xBFBFFF5048444240, // G7 (54)
    0x7F7FFFA090888481, // H7 (55)
    0xFE03050911214181, // A8 (56)
    0xFD070A1222428202, // B8 (57)
    0xFB0F152444840404, // C8 (58)
    0xF71F2A4988080808, // D8 (59)
    0xEF3F549211101010, // E8 (60)
    0xDF7FA82422212020, // F8 (61)
    0xBFFF504844424040, // G8 (62)
    0x7FFFA09088848180  // H8 (63)
};

const uint64_t pawn_attacks_white[64] = {
    0x0000000000000200, // A1 (0) → B2
    0x0000000000000500, // B1 (1) → A2 or C2
    0x0000000000000A00, // C1 (2) → B2 or D2
    0x0000000000001400, // D1 (3) → C2 or E2
    0x0000000000002800, // E1 (4) → D2 or F2
    0x0000000000005000, // F1 (5) → E2 or G2
    0x000000000000A000, // G1 (6) → F2 or H2
    0x0000000000004000, // H1 (7) → G2
    0x0000000000020000, // A2 (8) → B3
    0x0000000000050000, // B2 (9) → A3 or C3
    0x00000000000A0000, // C2 (10) → B3 or D3
    0x0000000000140000, // D2 (11) → C3 or E3
    0x0000000000280000, // E2 (12) → D3 or F3
    0x0000000000500000, // F2 (13) → E3 or G3
    0x0000000000A00000, // G2 (14) → F3 or H3
    0x0000000000400000, // H2 (15) → G3
    0x0000000002000000, // A3 (16) → B4
    0x0000000005000000, // B3 (17) → A4 or C4
    0x000000000A000000, // C3 (18) → B4 or D4
    0x0000000014000000, // D3 (19) → C4 or E4
    0x0000000028000000, // E3 (20) → D4 or F4
    0x0000000050000000, // F3 (21) → E4 or G4
    0x00000000A0000000, // G3 (22) → F4 or H4
    0x0000000040000000, // H3 (23) → G4
    0x0000000200000000, // A4 (24) → B5
    0x0000000500000000, // B4 (25) → A5 or C5
    0x0000000A00000000, // C4 (26) → B5 or D5
    0x0000001400000000, // D4 (27) → C5 or E5
    0x0000002800000000, // E4 (28) → D5 or F5
    0x0000005000000000, // F4 (29) → E5 or G5
    0x000000A000000000, // G4 (30) → F5 or H5
    0x0000004000000000, // H4 (31) → G5
    0x0000020000000000, // A5 (32) → B6
    0x0000050000000000, // B5 (33) → A6 or C6
    0x00000A0000000000, // C5 (34) → B6 or D6
    0x0000140000000000, // D5 (35) → C6 or E6
    0x0000280000000000, // E5 (36) → D6 or F6
    0x0000500000000000, // F5 (37) → E6 or G6
    0x0000A00000000000, // G5 (38) → F6 or H6
    0x0000400000000000, // H5 (39) → G6
    0x0002000000000000, // A6 (40) → B7
    0x0005000000000000, // B6 (41) → A7 or C7
    0x000A000000000000, // C6 (42) → B7 or D7
    0x0014000000000000, // D6 (43) → C7 or E7
    0x0028000000000000, // E6 (44) → D7 or F7
    0x0050000000000000, // F6 (45) → E7 or G7
    0x00A0000000000000, // G6 (46) → F7 or H7
    0x0040000000000000, // H6 (47) → G7
    0x0200000000000000, // A7 (48) → B8
    0x0500000000000000, // B7 (49) → A8 or C8
    0x0A00000000000000, // C7 (50) → B8 or D8
    0x1400000000000000, // D7 (51) → C8 or E8
    0x2800000000000000, // E7 (52) → D8 or F8
    0x5000000000000000, // F7 (53) → E8 or G8
    0xA000000000000000, // G7 (54) → F8 or H8
    0x4000000000000000, // H7 (55) → G8
    0x0000000000000000, // A8 (56) (Invalid)
    0x0000000000000000, // B8 (57) (Invalid)
    0x0000000000000000, // C8 (58) (Invalid)
    0x0000000000000000, // D8 (59) (Invalid)
    0x0000000000000000, // E8 (60) (Invalid)
    0x0000000000000000, // F8 (61) (Invalid)
    0x0000000000000000, // G8 (62) (Invalid)
    0x0000000000000000  // H8 (63) (Invalid)
};

const uint64_t pawn_attacks_black[64] = {
    0x0000000000000000, // A1 (0) (Invalid)
    0x0000000000000000, // B1 (1) (Invalid)
    0x0000000000000000, // C1 (2) (Invalid)
    0x0000000000000000, // D1 (3) (Invalid)
    0x0000000000000000, // E1 (4) (Invalid)
    0x0000000000000000, // F1 (5) (Invalid)
    0x0000000000000000, // G1 (6) (Invalid)
    0x0000000000000000, // H1 (7) (Invalid)
    0x0000000000000002, // A2 (8) → B1
    0x0000000000000005, // B2 (9) → A1 or C1
    0x000000000000000A, // C2 (10) → B1 or D1
    0x0000000000000014, // D2 (11) → C1 or E1
    0x0000000000000028, // E2 (12) → D1 or F1
    0x0000000000000050, // F2 (13) → E1 or G1
    0x00000000000000A0, // G2 (14) → F1 or H1
    0x0000000000000040, // H2 (15) → G1
    0x0000000000000200, // A3 (16) → B2
    0x0000000000000500, // B3 (17) → A2 or C2
    0x0000000000000A00, // C3 (18) → B2 or D2
    0x0000000000001400, // D3 (19) → C2 or E2
    0x0000000000002800, // E3 (20) → D2 or F2
    0x0000000000005000, // F3 (21) → E2 or G2
    0x000000000000A000, // G3 (22) → F2 or H2
    0x0000000000004000, // H3 (23) → G2
    0x0000000000020000, // A4 (24) → B3
    0x0000000000050000, // B4 (25) → A3 or C3
    0x00000000000A0000, // C4 (26) → B3 or D3
    0x0000000000140000, // D4 (27) → C3 or E3
    0x0000000000280000, // E4 (28) → D3 or F3
    0x0000000000500000, // F4 (29) → E3 or G3
    0x0000000000A00000, // G4 (30) → F3 or H3
    0x0000000000400000, // H4 (31) → G3
    0x0000000002000000, // A5 (32) → B4
    0x0000000005000000, // B5 (33) → A4 or C4
    0x000000000A000000, // C5 (34) → B4 or D4
    0x0000000014000000, // D5 (35) → C4 or E4
    0x0000000028000000, // E5 (36) → D4 or F4
    0x0000000050000000, // F5 (37) → E4 or G4
    0x00000000A0000000, // G5 (38) → F4 or H4
    0x0000000040000000, // H5 (39) → G4
    0x0000000200000000, // A6 (40) → B5
    0x0000000500000000, // B6 (41) → A5 or C5
    0x0000000A00000000, // C6 (42) → B5 or D5
    0x0000001400000000, // D6 (43) → C5 or E5
    0x0000002800000000, // E6 (44) → D5 or F5
    0x0000005000000000, // F6 (45) → E5 or G5
    0x000000A000000000, // G6 (46) → F5 or H5
    0x0000004000000000, // H6 (47) → G5
    0x0000020000000000, // A7 (48) → B6
    0x0000050000000000, // B7 (49) → A6 or C6
    0x00000A0000000000, // C7 (50) → B6 or D6
    0x0000140000000000, // D7 (51) → C6 or E6
    0x0000280000000000, // E7 (52) → D6 or F6
    0x0000500000000000, // F7 (53) → E6 or G6
    0x0000A00000000000, // G7 (54) → F6 or H6
    0x0000400000000000, // H7 (55) → G6
    0x0002000000000000, // A8 (56) → B7
    0x0005000000000000, // B8 (57) → A7 or C7
    0x000A000000000000, // C8 (58) → B7 or D7
    0x0014000000000000, // D8 (59) → C7 or E7
    0x0028000000000000, // E8 (60) → D7 or F7
    0x0050000000000000, // F8 (61) → E7 or G7
    0x00A0000000000000, // G8 (62) → F7 or H7
    0x0040000000000000  // H8 (63) → G7
};

const uint64_t pawn_single_push_white[64] = {
    0x0000000000000100, // A1 (0) → A2
    0x0000000000000200, // B1 (1) → B2
    0x0000000000000400, // C1 (2) → C2
    0x0000000000000800, // D1 (3) → D2
    0x0000000000001000, // E1 (4) → E2
    0x0000000000002000, // F1 (5) → F2
    0x0000000000004000, // G1 (6) → G2
    0x0000000000008000, // H1 (7) → H2
    0x0000000000010000, // A2 (8) → A3
    0x0000000000020000, // B2 (9) → B3
    0x0000000000040000, // C2 (10) → C3
    0x0000000000080000, // D2 (11) → D3
    0x0000000000100000, // E2 (12) → E3
    0x0000000000200000, // F2 (13) → F3
    0x0000000000400000, // G2 (14) → G3
    0x0000000000800000, // H2 (15) → H3
    0x0000000001000000, // A3 (16) → A4
    0x0000000002000000, // B3 (17) → B4
    0x0000000004000000, // C3 (18) → C4
    0x0000000008000000, // D3 (19) → D4
    0x0000000010000000, // E3 (20) → E4
    0x0000000020000000, // F3 (21) → F4
    0x0000000040000000, // G3 (22) → G4
    0x0000000080000000, // H3 (23) → H4
    0x0000000100000000, // A4 (24) → A5
    0x0000000200000000, // B4 (25) → B5
    0x0000000400000000, // C4 (26) → C5
    0x0000000800000000, // D4 (27) → D5
    0x0000001000000000, // E4 (28) → E5
    0x0000002000000000, // F4 (29) → F5
    0x0000004000000000, // G4 (30) → G5
    0x0000008000000000, // H4 (31) → H5
    0x0000010000000000, // A5 (32) → A6
    0x0000020000000000, // B5 (33) → B6
    0x0000040000000000, // C5 (34) → C6
    0x0000080000000000, // D5 (35) → D6
    0x0000100000000000, // E5 (36) → E6
    0x0000200000000000, // F5 (37) → F6
    0x0000400000000000, // G5 (38) → G6
    0x0000800000000000, // H5 (39) → H6
    0x0001000000000000, // A6 (40) → A7
    0x0002000000000000, // B6 (41) → B7
    0x0004000000000000, // C6 (42) → C7
    0x0008000000000000, // D6 (43) → D7
    0x0010000000000000, // E6 (44) → E7
    0x0020000000000000, // F6 (45) → F7
    0x0040000000000000, // G6 (46) → G7
    0x0080000000000000, // H6 (47) → H7
    0x0100000000000000, // A7 (48) → A8
    0x0200000000000000, // B7 (49) → B8
    0x0400000000000000, // C7 (50) → C8
    0x0800000000000000, // D7 (51) → D8
    0x1000000000000000, // E7 (52) → E8
    0x2000000000000000, // F7 (53) → F8
    0x4000000000000000, // G7 (54) → G8
    0x8000000000000000, // H7 (55) → H8
    0x0000000000000000, // A8 (56) (Invalid)
    0x0000000000000000, // B8 (57) (Invalid)
    0x0000000000000000, // C8 (58) (Invalid)
    0x0000000000000000, // D8 (59) (Invalid)
    0x0000000000000000, // E8 (60) (Invalid)
    0x0000000000000000, // F8 (61) (Invalid)
    0x0000000000000000, // G8 (62) (Invalid)
    0x0000000000000000  // H8 (63) (Invalid)
};

const uint64_t pawn_single_push_black[64] = {
    0x0000000000000000, // A1 (0) (Invalid)
    0x0000000000000000, // B1 (1) (Invalid)
    0x0000000000000000, // C1 (2) (Invalid)
    0x0000000000000000, // D1 (3) (Invalid)
    0x0000000000000000, // E1 (4) (Invalid)
    0x0000000000000000, // F1 (5) (Invalid)
    0x0000000000000000, // G1 (6) (Invalid)
    0x0000000000000000, // H1 (7) (Invalid)
    0x0000000000000001, // A2 (8) → A1
    0x0000000000000002, // B2 (9) → B1
    0x0000000000000004, // C2 (10) → C1
    0x0000000000000008, // D2 (11) → D1
    0x0000000000000010, // E2 (12) → E1
    0x0000000000000020, // F2 (13) → F1
    0x0000000000000040, // G2 (14) → G1
    0x0000000000000080, // H2 (15) → H1
    0x0000000000000100, // A3 (16) → A2
    0x0000000000000200, // B3 (17) → B2
    0x0000000000000400, // C3 (18) → C2
    0x0000000000000800, // D3 (19) → D2
    0x0000000000001000, // E3 (20) → E2
    0x0000000000002000, // F3 (21) → F2
    0x0000000000004000, // G3 (22) → G2
    0x0000000000008000, // H3 (23) → H2
    0x0000000000010000, // A4 (24) → A3
    0x0000000000020000, // B4 (25) → B3
    0x0000000000040000, // C4 (26) → C3
    0x0000000000080000, // D4 (27) → D3
    0x0000000000100000, // E4 (28) → E3
    0x0000000000200000, // F4 (29) → F3
    0x0000000000400000, // G4 (30) → G3
    0x0000000000800000, // H4 (31) → H3
    0x0000000001000000, // A5 (32) → A4
    0x0000000002000000, // B5 (33) → B4
    0x0000000004000000, // C5 (34) → C4
    0x0000000008000000, // D5 (35) → D4
    0x0000000010000000, // E5 (36) → E4
    0x0000000020000000, // F5 (37) → F4
    0x0000000040000000, // G5 (38) → G4
    0x0000000080000000, // H5 (39) → H4
    0x0000000100000000, // A6 (40) → A5
    0x0000000200000000, // B6 (41) → B5
    0x0000000400000000, // C6 (42) → C5
    0x0000000800000000, // D6 (43) → D5
    0x0000001000000000, // E6 (44) → E5
    0x0000002000000000, // F6 (45) → F5
    0x0000004000000000, // G6 (46) → G5
    0x0000008000000000, // H6 (47) → H5
    0x0000010000000000, // A7 (48) → A6
    0x0000020000000000, // B7 (49) → B6
    0x0000040000000000, // C7 (50) → C6
    0x0000080000000000, // D7 (51) → D6
    0x0000100000000000, // E7 (52) → E6
    0x0000200000000000, // F7 (53) → F6
    0x0000400000000000, // G7 (54) → G6
    0x0000800000000000, // H7 (55) → H6
    0x0001000000000000, // A8 (56) → A7
    0x0002000000000000, // B8 (57) → B7
    0x0004000000000000, // C8 (58) → C7
    0x0008000000000000, // D8 (59) → D7
    0x0010000000000000, // E8 (60) → E7
    0x0020000000000000, // F8 (61) → F7
    0x0040000000000000, // G8 (62) → G7
    0x0080000000000000  // H8 (63) → H7
};

const uint64_t pawn_double_push_white[64] = {
    // Rank 1 (invalid)
    0x0000000000000000, // A1 (0)
    0x0000000000000000, // B1 (1)
    0x0000000000000000, // C1 (2)
    0x0000000000000000, // D1 (3)
    0x0000000000000000, // E1 (4)
    0x0000000000000000, // F1 (5)
    0x0000000000000000, // G1 (6)
    0x0000000000000000, // H1 (7)
    // Rank 2 (double push to rank 4)
    0x0000000001000000, // A2 (8)  → A4
    0x0000000002000000, // B2 (9)  → B4
    0x0000000004000000, // C2 (10) → C4
    0x0000000008000000, // D2 (11) → D4
    0x0000000010000000, // E2 (12) → E4
    0x0000000020000000, // F2 (13) → F4
    0x0000000040000000, // G2 (14) → G4
    0x0000000080000000, // H2 (15) → H4
    // Ranks 3-8 (invalid for double push)
    0x0000000000000000, // A3 (16)
    0x0000000000000000, // B3 (17)
    0x0000000000000000, // C3 (18)
    0x0000000000000000, // D3 (19)
    0x0000000000000000, // E3 (20)
    0x0000000000000000, // F3 (21)
    0x0000000000000000, // G3 (22)
    0x0000000000000000, // H3 (23)
    0x0000000000000000, // A4 (24)
    0x0000000000000000, // B4 (25)
    0x0000000000000000, // C4 (26)
    0x0000000000000000, // D4 (27)
    0x0000000000000000, // E4 (28)
    0x0000000000000000, // F4 (29)
    0x0000000000000000, // G4 (30)
    0x0000000000000000, // H4 (31)
    0x0000000000000000, // A5 (32)
    0x0000000000000000, // B5 (33)
    0x0000000000000000, // C5 (34)
    0x0000000000000000, // D5 (35)
    0x0000000000000000, // E5 (36)
    0x0000000000000000, // F5 (37)
    0x0000000000000000, // G5 (38)
    0x0000000000000000, // H5 (39)
    0x0000000000000000, // A6 (40)
    0x0000000000000000, // B6 (41)
    0x0000000000000000, // C6 (42)
    0x0000000000000000, // D6 (43)
    0x0000000000000000, // E6 (44)
    0x0000000000000000, // F6 (45)
    0x0000000000000000, // G6 (46)
    0x0000000000000000, // H6 (47)
    0x0000000000000000, // A7 (48)
    0x0000000000000000, // B7 (49)
    0x0000000000000000, // C7 (50)
    0x0000000000000000, // D7 (51)
    0x0000000000000000, // E7 (52)
    0x0000000000000000, // F7 (53)
    0x0000000000000000, // G7 (54)
    0x0000000000000000, // H7 (55)
    0x0000000000000000, // A8 (56)
    0x0000000000000000, // B8 (57)
    0x0000000000000000, // C8 (58)
    0x0000000000000000, // D8 (59)
    0x0000000000000000, // E8 (60)
    0x0000000000000000, // F8 (61)
    0x0000000000000000, // G8 (62)
    0x0000000000000000  // H8 (63)
};

const uint64_t pawn_double_push_black[64] = {
    // Ranks 1-6 (invalid for double push)
    0x0000000000000000, // A1 (0)
    0x0000000000000000, // B1 (1)
    0x0000000000000000, // C1 (2)
    0x0000000000000000, // D1 (3)
    0x0000000000000000, // E1 (4)
    0x0000000000000000, // F1 (5)
    0x0000000000000000, // G1 (6)
    0x0000000000000000, // H1 (7)
    0x0000000000000000, // A2 (8)
    0x0000000000000000, // B2 (9)
    0x0000000000000000, // C2 (10)
    0x0000000000000000, // D2 (11)
    0x0000000000000000, // E2 (12)
    0x0000000000000000, // F2 (13)
    0x0000000000000000, // G2 (14)
    0x0000000000000000, // H2 (15)
    0x0000000000000000, // A3 (16)
    0x0000000000000000, // B3 (17)
    0x0000000000000000, // C3 (18)
    0x0000000000000000, // D3 (19)
    0x0000000000000000, // E3 (20)
    0x0000000000000000, // F3 (21)
    0x0000000000000000, // G3 (22)
    0x0000000000000000, // H3 (23)
    0x0000000000000000, // A4 (24)
    0x0000000000000000, // B4 (25)
    0x0000000000000000, // C4 (26)
    0x0000000000000000, // D4 (27)
    0x0000000000000000, // E4 (28)
    0x0000000000000000, // F4 (29)
    0x0000000000000000, // G4 (30)
    0x0000000000000000, // H4 (31)
    0x0000000000000000, // A5 (32)
    0x0000000000000000, // B5 (33)
    0x0000000000000000, // C5 (34)
    0x0000000000000000, // D5 (35)
    0x0000000000000000, // E5 (36)
    0x0000000000000000, // F5 (37)
    0x0000000000000000, // G5 (38)
    0x0000000000000000, // H5 (39)
    0x0000000000000000, // A6 (40)
    0x0000000000000000, // B6 (41)
    0x0000000000000000, // C6 (42)
    0x0000000000000000, // D6 (43)
    0x0000000000000000, // E6 (44)
    0x0000000000000000, // F6 (45)
    0x0000000000000000, // G6 (46)
    0x0000000000000000, // H6 (47)
    // Rank 7 (double push to rank 5)
    0x0000000000001000, // A7 (48) → A5
    0x0000000000002000, // B7 (49) → B5
    0x0000000000004000, // C7 (50) → C5
    0x0000000000008000, // D7 (51) → D5
    0x0000000000010000, // E7 (52) → E5
    0x0000000000020000, // F7 (53) → F5
    0x0000000000040000, // G7 (54) → G5
    0x0000000000080000, // H7 (55) → H5
    // Rank 8 (invalid)
    0x0000000000000000, // A8 (56)
    0x0000000000000000, // B8 (57)
    0x0000000000000000, // C8 (58)
    0x0000000000000000, // D8 (59)
    0x0000000000000000, // E8 (60)
    0x0000000000000000, // F8 (61)
    0x0000000000000000, // G8 (62)
    0x0000000000000000  // H8 (63)
};

const uint64_t ep_captures_white[64] = {
    // Rank 1 (A1-H1: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    // Rank 2 (A2-H2: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    // Rank 3 (A3-H3: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    // Rank 4 (A4-H4: valid EP captures)
    0x0000000000020000, // A4: EP capture if target is A6 (requires enemy pawn on A5)
    0x0000000000050000, // B4: EP capture if target is B6 (enemy pawn on B5)
    0x00000000000A0000, // C4: EP capture if target is C6 (enemy pawn on C5)
    0x0000000000140000, // D4: EP capture if target is D6 (enemy pawn on D5)
    0x0000000000280000, // E4: EP capture if target is E6 (enemy pawn on E5)
    0x0000000000500000, // F4: EP capture if target is F6 (enemy pawn on F5)
    0x0000000000A00000, // G4: EP capture if target is G6 (enemy pawn on G5)
    0x0000000000400000, // H4: EP capture if target is H6 (enemy pawn on H5)
    // Rank 5 (A5-H5: invalid for White)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    // Rank 6-8 (A6-H8: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000
};

const uint64_t ep_captures_black[64] = {
    // Rank 1-4 (A1-H4: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    // Rank 5 (A5-H5: valid EP captures)
    0x0000000000000002, // A5: EP capture if target is A3 (requires enemy pawn on A4)
    0x0000000000000005, // B5: EP capture if target is B3 (enemy pawn on B4)
    0x000000000000000A, // C5: EP capture if target is C3 (enemy pawn on C4)
    0x0000000000000014, // D5: EP capture if target is D3 (enemy pawn on D4)
    0x0000000000000028, // E5: EP capture if target is E3 (enemy pawn on E4)
    0x0000000000000050, // F5: EP capture if target is F3 (enemy pawn on F4)
    0x00000000000000A0, // G5: EP capture if target is G3 (enemy pawn on G4)
    0x0000000000000040, // H5: EP capture if target is H3 (enemy pawn on H4)
    // Rank 6-8 (A6-H8: invalid)
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000
};

#endif
